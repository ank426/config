return {
  "nvim-telescope/telescope.nvim",
  branch = "0.1.x",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-web-devicons",
    { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make' },
  },
  keys = {
    { "<leader>sg", function() require("telescope.builtin").live_grep() end,                 desc = "[S]earch by [G]rep" },
    { "<leader>sw", function() require("telescope.builtin").grep_string() end,               desc = "[S]earch current [W]ord" },
    { "<leader>sf", function() require("telescope.builtin").find_files() end,                desc = "[S]earch [F]iles" },
    { "<leader>ss", function() require("telescope.builtin").builtin() end,                   desc = "[S]earch [S]elect Telescope" },
    { "<leader>sr", function() require("telescope.builtin").resume() end,                    desc = "[S]earch [R]esume" },
    { "<leader>sc", function() require("telescope.builtin").commands() end,                  desc = "[S]earch [C]ommands" },
    { "<leader>s.", function() require("telescope.builtin").oldfiles() end,                  desc = "[S]earch Recent Files ('.' for repeat)" },
    { "<leader>so", function() require("telescope.builtin").vim_options() end,               desc = "[S]earch Vim [O]ptions" },
    { "<leader>sh", function() require("telescope.builtin").help_tags() end,                 desc = "[S]earch [H]elp" },
    { "<leader>sb", function() require("telescope.builtin").buffers() end,                   desc = "[S]earch Existing [B]uffers" },
    { "<leader>sk", function() require("telescope.builtin").keymaps() end,                   desc = "[S]earch [K]eymaps" },
    { "<leader>sd", function() require("telescope.builtin").diagnostics() end,               desc = "[S]earch [D]iagnostics" },
    { "<leader>/",  function() require("telescope.builtin").current_buffer_fuzzy_find() end, desc = "[/] Fuzzily search in current buffer" },
    {
      "<leader>s/",
      function() require("telescope.builtin").live_grep({ grep_open_files = true, prompt_title = "Live Grep in Open Files" }) end,
      desc = "[S]earch [/] in Open Files",
    },
    {
      "<leader>sn",
      function() require("telescope.builtin").find_files({ cwd = vim.fn.stdpath("config"), prompt_title = "Find File in Config" }) end,
      desc = "[S]earch [N]eovim files",
    },
    { "gd",         function() require("telescope.builtin").lsp_definitions() end,               desc = "LSP: [G]oto [D]efinition" },
    { "gr",         function() require("telescope.builtin").lsp_references() end,                desc = "LSP: [G]oto [R]eferences" },
    { "gI",         function() require("telescope.builtin").lsp_implementations() end,           desc = "LSP: [G]oto [I]mplementation" },
    { "<leader>D",  function() require("telescope.builtin").lsp_type_definitions() end,          desc = "LSP: Type [D]efinition" },
    { "<leader>ds", function() require("telescope.builtin").lsp_document_symbols() end,          desc = "LSP: [D]ocument [S]ymbols" },
    { "<leader>ws", function() require("telescope.builtin").lsp_dynamic_workspace_symbols() end, desc = "LSP: [W]orkspace [S]ymbols" },
  },
  opts = {
    defaults = {
      results_title = false,
      prompt_title = false,
      history = false,
      mappings = {
        i = {
          ["<C-u>"] = false,
          ["<C-k>"] = "preview_scrolling_up",
          ["<C-j>"] = "preview_scrolling_down",
        },
      },
    },
    pickers = {
      live_grep = { preview_title = false },
      grep_string = { preview_title = false },
      find_files = {
        preview_title = false,
        -- hidden = true,
        no_ignore = true,
        no_ignore_parent = true,
      },
      treesitter = { preview_title = false },
      current_buffer_fuzzy_find = {
        preview_title = false,
        previewer = false,
        theme = "dropdown",
      },
      tags = { preview_title = false },
      current_buffer_tags = { preview_title = false },
      git_files = { preview_title = false },
      git_commits = { preview_title = false },
      git_bcommits = { preview_title = false },
      git_branches = { preview_title = false },
      git_status = { preview_title = false },
      git_stash = { preview_title = false },
      builtin = {
        preview_title = false,
        previewer = false,
        theme = "dropdown",
      },
      resume = { preview_title = false },
      pickers = { preview_title = false },
      planets = { preview_title = false },
      symbols = { preview_title = false },
      commands = { preview_title = false },
      quickfix = { preview_title = false },
      quickfixhistory = { preview_title = false },
      loclist = { preview_title = false },
      oldfiles = { preview_title = false },
      command_history = { preview_title = false },
      search_history = { preview_title = false },
      vim_options = { preview_title = false },
      help_tags = {
        preview_title = false,
        mappings = {
          i = {
            ["<cr>"] = function() vim.cmd.H(require("telescope.actions.state").get_selected_entry().value) end,
          },
        },
      },
      man_pages = { preview_title = false },
      reloader = { preview_title = false },
      buffers = {
        preview_title = false,
        mappings = {
          i = {
            ["<C-d>"] = "delete_buffer",
          },
        },
      },
      colorschemes = { preview_title = false },
      marks = { preview_title = false },
      registers = { preview_title = false },
      keymaps = { preview_title = false },
      filetypes = { preview_title = false },
      highlights = { preview_title = false },
      autocommands = { preview_title = false },
      spell_suggest = { preview_title = false },
      tagstack = { preview_title = false },
      jumplist = { preview_title = false },
      lsp_references = { preview_title = false },
      lsp_incoming_calls = { preview_title = false },
      lsp_outgoing_calls = { preview_title = false },
      lsp_definitions = { preview_title = false },
      lsp_type_defintions = { preview_title = false },
      lsp_implementations = { preview_title = false },
      lsp_document_symbols = { preview_title = false },
      lsp_workspace_symbols = { preview_title = false },
      lsp_dynamic_workspace_symbols = { preview_title = false },
      lsp_diagnostics = { preview_title = false },
    },
    extensions = {
      fzf = {},
    },
  },
  config = function(_, opts)
    require("telescope").setup(opts)
    require("telescope").load_extension("fzf")
  end,
}
